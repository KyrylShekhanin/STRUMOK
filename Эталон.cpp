#include <iostream>
#include <intrin.h>
using namespace std;

#define UINT uint64_t
#define INIT_MOD true
#define CPU_FREQ 4.0
#define ainv_mul(w) (((w)>>8)^(strumok_alphainv_mul[w&0xff]))
#define a_mul(w)    (((w)<<8)^(strumok_alpha_mul[w>>56]))

/*************************************************/
//table


UINT strumok_alpha_mul[256] = {
    0x0000000000000000ULL, 0xD73F04125E000004ULL, 0xB37E0824BC000008ULL, 0x64410C36E200000CULL,
    0x7BFC104865000010ULL, 0xACC3145A3B000014ULL, 0xC882186CD9000018ULL, 0x1FBD1C7E8700001CULL,
    0xF6E52090CA000020ULL, 0x21DA248294000024ULL, 0x459B28B476000028ULL, 0x92A42CA62800002CULL,
    0x8D1930D8AF000030ULL, 0x5A2634CAF1000034ULL, 0x3E6738FC13000038ULL, 0xE9583CEE4D00003CULL,
    0xF1D7403D89000040ULL, 0x26E8442FD7000044ULL, 0x42A9481935000048ULL, 0x95964C0B6B00004CULL,
    0x8A2B5075EC000050ULL, 0x5D145467B2000054ULL, 0x3955585150000058ULL, 0xEE6A5C430E00005CULL,
    0x073260AD43000060ULL, 0xD00D64BF1D000064ULL, 0xB44C6889FF000068ULL, 0x63736C9BA100006CULL,
    0x7CCE70E526000070ULL, 0xABF174F778000074ULL, 0xCFB078C19A000078ULL, 0x188F7CD3C400007CULL,
    0xFFB3807A0F000080ULL, 0x288C846851000084ULL, 0x4CCD885EB3000088ULL, 0x9BF28C4CED00008CULL,
    0x844F90326A000090ULL, 0x5370942034000094ULL, 0x37319816D6000098ULL, 0xE00E9C048800009CULL,
    0x0956A0EAC50000A0ULL, 0xDE69A4F89B0000A4ULL, 0xBA28A8CE790000A8ULL, 0x6D17ACDC270000ACULL,
    0x72AAB0A2A00000B0ULL, 0xA595B4B0FE0000B4ULL, 0xC1D4B8861C0000B8ULL, 0x16EBBC94420000BCULL,
    0x0E64C047860000C0ULL, 0xD95BC455D80000C4ULL, 0xBD1AC8633A0000C8ULL, 0x6A25CC71640000CCULL,
    0x7598D00FE30000D0ULL, 0xA2A7D41DBD0000D4ULL, 0xC6E6D82B5F0000D8ULL, 0x11D9DC39010000DCULL,
    0xF881E0D74C0000E0ULL, 0x2FBEE4C5120000E4ULL, 0x4BFFE8F3F00000E8ULL, 0x9CC0ECE1AE0000ECULL,
    0x837DF09F290000F0ULL, 0x5442F48D770000F4ULL, 0x3003F8BB950000F8ULL, 0xE73CFCA9CB0000FCULL,
    0xE37B1DF41E00001DULL, 0x344419E640000019ULL, 0x500515D0A2000015ULL, 0x873A11C2FC000011ULL,
    0x98870DBC7B00000DULL, 0x4FB809AE25000009ULL, 0x2BF90598C7000005ULL, 0xFCC6018A99000001ULL,
    0x159E3D64D400003DULL, 0xC2A139768A000039ULL, 0xA6E0354068000035ULL, 0x71DF315236000031ULL,
    0x6E622D2CB100002DULL, 0xB95D293EEF000029ULL, 0xDD1C25080D000025ULL, 0x0A23211A53000021ULL,
    0x12AC5DC99700005DULL, 0xC59359DBC9000059ULL, 0xA1D255ED2B000055ULL, 0x76ED51FF75000051ULL,
    0x69504D81F200004DULL, 0xBE6F4993AC000049ULL, 0xDA2E45A54E000045ULL, 0x0D1141B710000041ULL,
    0xE4497D595D00007DULL, 0x3376794B03000079ULL, 0x5737757DE1000075ULL, 0x8008716FBF000071ULL,
    0x9FB56D113800006DULL, 0x488A690366000069ULL, 0x2CCB653584000065ULL, 0xFBF46127DA000061ULL,
    0x1CC89D8E1100009DULL, 0xCBF7999C4F000099ULL, 0xAFB695AAAD000095ULL, 0x788991B8F3000091ULL,
    0x67348DC67400008DULL, 0xB00B89D42A000089ULL, 0xD44A85E2C8000085ULL, 0x037581F096000081ULL,
    0xEA2DBD1EDB0000BDULL, 0x3D12B90C850000B9ULL, 0x5953B53A670000B5ULL, 0x8E6CB128390000B1ULL,
    0x91D1AD56BE0000ADULL, 0x46EEA944E00000A9ULL, 0x22AFA572020000A5ULL, 0xF590A1605C0000A1ULL,
    0xED1FDDB3980000DDULL, 0x3A20D9A1C60000D9ULL, 0x5E61D597240000D5ULL, 0x895ED1857A0000D1ULL,
    0x96E3CDFBFD0000CDULL, 0x41DCC9E9A30000C9ULL, 0x259DC5DF410000C5ULL, 0xF2A2C1CD1F0000C1ULL,
    0x1BFAFD23520000FDULL, 0xCCC5F9310C0000F9ULL, 0xA884F507EE0000F5ULL, 0x7FBBF115B00000F1ULL,
    0x6006ED6B370000EDULL, 0xB739E979690000E9ULL, 0xD378E54F8B0000E5ULL, 0x0447E15DD50000E1ULL,
    0xDBF63AF53C00003AULL, 0x0CC93EE76200003EULL, 0x688832D180000032ULL, 0xBFB736C3DE000036ULL,
    0xA00A2ABD5900002AULL, 0x77352EAF0700002EULL, 0x13742299E5000022ULL, 0xC44B268BBB000026ULL,
    0x2D131A65F600001AULL, 0xFA2C1E77A800001EULL, 0x9E6D12414A000012ULL, 0x4952165314000016ULL,
    0x56EF0A2D9300000AULL, 0x81D00E3FCD00000EULL, 0xE59102092F000002ULL, 0x32AE061B71000006ULL,
    0x2A217AC8B500007AULL, 0xFD1E7EDAEB00007EULL, 0x995F72EC09000072ULL, 0x4E6076FE57000076ULL,
    0x51DD6A80D000006AULL, 0x86E26E928E00006EULL, 0xE2A362A46C000062ULL, 0x359C66B632000066ULL,
    0xDCC45A587F00005AULL, 0x0BFB5E4A2100005EULL, 0x6FBA527CC3000052ULL, 0xB885566E9D000056ULL,
    0xA7384A101A00004AULL, 0x70074E024400004EULL, 0x14464234A6000042ULL, 0xC3794626F8000046ULL,
    0x2445BA8F330000BAULL, 0xF37ABE9D6D0000BEULL, 0x973BB2AB8F0000B2ULL, 0x4004B6B9D10000B6ULL,
    0x5FB9AAC7560000AAULL, 0x8886AED5080000AEULL, 0xECC7A2E3EA0000A2ULL, 0x3BF8A6F1B40000A6ULL,
    0xD2A09A1FF900009AULL, 0x059F9E0DA700009EULL, 0x61DE923B45000092ULL, 0xB6E196291B000096ULL,
    0xA95C8A579C00008AULL, 0x7E638E45C200008EULL, 0x1A22827320000082ULL, 0xCD1D86617E000086ULL,
    0xD592FAB2BA0000FAULL, 0x02ADFEA0E40000FEULL, 0x66ECF296060000F2ULL, 0xB1D3F684580000F6ULL,
    0xAE6EEAFADF0000EAULL, 0x7951EEE8810000EEULL, 0x1D10E2DE630000E2ULL, 0xCA2FE6CC3D0000E6ULL,
    0x2377DA22700000DAULL, 0xF448DE302E0000DEULL, 0x9009D206CC0000D2ULL, 0x4736D614920000D6ULL,
    0x588BCA6A150000CAULL, 0x8FB4CE784B0000CEULL, 0xEBF5C24EA90000C2ULL, 0x3CCAC65CF70000C6ULL,
    0x388D270122000027ULL, 0xEFB223137C000023ULL, 0x8BF32F259E00002FULL, 0x5CCC2B37C000002BULL,
    0x4371374947000037ULL, 0x944E335B19000033ULL, 0xF00F3F6DFB00003FULL, 0x27303B7FA500003BULL,
    0xCE680791E8000007ULL, 0x19570383B6000003ULL, 0x7D160FB55400000FULL, 0xAA290BA70A00000BULL,
    0xB59417D98D000017ULL, 0x62AB13CBD3000013ULL, 0x06EA1FFD3100001FULL, 0xD1D51BEF6F00001BULL,
    0xC95A673CAB000067ULL, 0x1E65632EF5000063ULL, 0x7A246F181700006FULL, 0xAD1B6B0A4900006BULL,
    0xB2A67774CE000077ULL, 0x6599736690000073ULL, 0x01D87F507200007FULL, 0xD6E77B422C00007BULL,
    0x3FBF47AC61000047ULL, 0xE88043BE3F000043ULL, 0x8CC14F88DD00004FULL, 0x5BFE4B9A8300004BULL,
    0x444357E404000057ULL, 0x937C53F65A000053ULL, 0xF73D5FC0B800005FULL, 0x20025BD2E600005BULL,
    0xC73EA77B2D0000A7ULL, 0x1001A369730000A3ULL, 0x7440AF5F910000AFULL, 0xA37FAB4DCF0000ABULL,
    0xBCC2B733480000B7ULL, 0x6BFDB321160000B3ULL, 0x0FBCBF17F40000BFULL, 0xD883BB05AA0000BBULL,
    0x31DB87EBE7000087ULL, 0xE6E483F9B9000083ULL, 0x82A58FCF5B00008FULL, 0x559A8BDD0500008BULL,
    0x4A2797A382000097ULL, 0x9D1893B1DC000093ULL, 0xF9599F873E00009FULL, 0x2E669B956000009BULL,
    0x36E9E746A40000E7ULL, 0xE1D6E354FA0000E3ULL, 0x8597EF62180000EFULL, 0x52A8EB70460000EBULL,
    0x4D15F70EC10000F7ULL, 0x9A2AF31C9F0000F3ULL, 0xFE6BFF2A7D0000FFULL, 0x2954FB38230000FBULL,
    0xC00CC7D66E0000C7ULL, 0x1733C3C4300000C3ULL, 0x7372CFF2D20000CFULL, 0xA44DCBE08C0000CBULL,
    0xBBF0D79E0B0000D7ULL, 0x6CCFD38C550000D3ULL, 0x088EDFBAB70000DFULL, 0xDFB1DBA8E90000DBULL
};

UINT strumok_alphainv_mul[256] = {
    0x0000000000000000ULL, 0x47FCC6018A990000ULL, 0x8EE59102092F0000ULL, 0xC919570383B60000ULL,
    0x01D73F04125E0000ULL, 0x462BF90598C70000ULL, 0x8F32AE061B710000ULL, 0xC8CE680791E80000ULL,
    0x02B37E0824BC0000ULL, 0x454FB809AE250000ULL, 0x8C56EF0A2D930000ULL, 0xCBAA290BA70A0000ULL,
    0x0364410C36E20000ULL, 0x4498870DBC7B0000ULL, 0x8D81D00E3FCD0000ULL, 0xCA7D160FB5540000ULL,
    0x047BFC1048650000ULL, 0x43873A11C2FC0000ULL, 0x8A9E6D12414A0000ULL, 0xCD62AB13CBD30000ULL,
    0x05ACC3145A3B0000ULL, 0x42500515D0A20000ULL, 0x8B49521653140000ULL, 0xCCB59417D98D0000ULL,
    0x06C882186CD90000ULL, 0x41344419E6400000ULL, 0x882D131A65F60000ULL, 0xCFD1D51BEF6F0000ULL,
    0x071FBD1C7E870000ULL, 0x40E37B1DF41E0000ULL, 0x89FA2C1E77A80000ULL, 0xCE06EA1FFD310000ULL,
    0x08F6E52090CA0000ULL, 0x4F0A23211A530000ULL, 0x8613742299E50000ULL, 0xC1EFB223137C0000ULL,
    0x0921DA2482940000ULL, 0x4EDD1C25080D0000ULL, 0x87C44B268BBB0000ULL, 0xC0388D2701220000ULL,
    0x0A459B28B4760000ULL, 0x4DB95D293EEF0000ULL, 0x84A00A2ABD590000ULL, 0xC35CCC2B37C00000ULL,
    0x0B92A42CA6280000ULL, 0x4C6E622D2CB10000ULL, 0x8577352EAF070000ULL, 0xC28BF32F259E0000ULL,
    0x0C8D1930D8AF0000ULL, 0x4B71DF3152360000ULL, 0x82688832D1800000ULL, 0xC5944E335B190000ULL,
    0x0D5A2634CAF10000ULL, 0x4AA6E03540680000ULL, 0x83BFB736C3DE0000ULL, 0xC443713749470000ULL,
    0x0E3E6738FC130000ULL, 0x49C2A139768A0000ULL, 0x80DBF63AF53C0000ULL, 0xC727303B7FA50000ULL,
    0x0FE9583CEE4D0000ULL, 0x48159E3D64D40000ULL, 0x810CC93EE7620000ULL, 0xC6F00F3F6DFB0000ULL,
    0x10F1D7403D890000ULL, 0x570D1141B7100000ULL, 0x9E14464234A60000ULL, 0xD9E88043BE3F0000ULL,
    0x1126E8442FD70000ULL, 0x56DA2E45A54E0000ULL, 0x9FC3794626F80000ULL, 0xD83FBF47AC610000ULL,
    0x1242A94819350000ULL, 0x55BE6F4993AC0000ULL, 0x9CA7384A101A0000ULL, 0xDB5BFE4B9A830000ULL,
    0x1395964C0B6B0000ULL, 0x5469504D81F20000ULL, 0x9D70074E02440000ULL, 0xDA8CC14F88DD0000ULL,
    0x148A2B5075EC0000ULL, 0x5376ED51FF750000ULL, 0x9A6FBA527CC30000ULL, 0xDD937C53F65A0000ULL,
    0x155D145467B20000ULL, 0x52A1D255ED2B0000ULL, 0x9BB885566E9D0000ULL, 0xDC444357E4040000ULL,
    0x1639555851500000ULL, 0x51C59359DBC90000ULL, 0x98DCC45A587F0000ULL, 0xDF20025BD2E60000ULL,
    0x17EE6A5C430E0000ULL, 0x5012AC5DC9970000ULL, 0x990BFB5E4A210000ULL, 0xDEF73D5FC0B80000ULL,
    0x18073260AD430000ULL, 0x5FFBF46127DA0000ULL, 0x96E2A362A46C0000ULL, 0xD11E65632EF50000ULL,
    0x19D00D64BF1D0000ULL, 0x5E2CCB6535840000ULL, 0x97359C66B6320000ULL, 0xD0C95A673CAB0000ULL,
    0x1AB44C6889FF0000ULL, 0x5D488A6903660000ULL, 0x9451DD6A80D00000ULL, 0xD3AD1B6B0A490000ULL,
    0x1B63736C9BA10000ULL, 0x5C9FB56D11380000ULL, 0x9586E26E928E0000ULL, 0xD27A246F18170000ULL,
    0x1C7CCE70E5260000ULL, 0x5B8008716FBF0000ULL, 0x92995F72EC090000ULL, 0xD565997366900000ULL,
    0x1DABF174F7780000ULL, 0x5A5737757DE10000ULL, 0x934E6076FE570000ULL, 0xD4B2A67774CE0000ULL,
    0x1ECFB078C19A0000ULL, 0x593376794B030000ULL, 0x902A217AC8B50000ULL, 0xD7D6E77B422C0000ULL,
    0x1F188F7CD3C40000ULL, 0x58E4497D595D0000ULL, 0x91FD1E7EDAEB0000ULL, 0xD601D87F50720000ULL,
    0x20FFB3807A0F0000ULL, 0x67037581F0960000ULL, 0xAE1A228273200000ULL, 0xE9E6E483F9B90000ULL,
    0x21288C8468510000ULL, 0x66D44A85E2C80000ULL, 0xAFCD1D86617E0000ULL, 0xE831DB87EBE70000ULL,
    0x224CCD885EB30000ULL, 0x65B00B89D42A0000ULL, 0xACA95C8A579C0000ULL, 0xEB559A8BDD050000ULL,
    0x239BF28C4CED0000ULL, 0x6467348DC6740000ULL, 0xAD7E638E45C20000ULL, 0xEA82A58FCF5B0000ULL,
    0x24844F90326A0000ULL, 0x63788991B8F30000ULL, 0xAA61DE923B450000ULL, 0xED9D1893B1DC0000ULL,
    0x2553709420340000ULL, 0x62AFB695AAAD0000ULL, 0xABB6E196291B0000ULL, 0xEC4A2797A3820000ULL,
    0x2637319816D60000ULL, 0x61CBF7999C4F0000ULL, 0xA8D2A09A1FF90000ULL, 0xEF2E669B95600000ULL,
    0x27E00E9C04880000ULL, 0x601CC89D8E110000ULL, 0xA9059F9E0DA70000ULL, 0xEEF9599F873E0000ULL,
    0x280956A0EAC50000ULL, 0x6FF590A1605C0000ULL, 0xA6ECC7A2E3EA0000ULL, 0xE11001A369730000ULL,
    0x29DE69A4F89B0000ULL, 0x6E22AFA572020000ULL, 0xA73BF8A6F1B40000ULL, 0xE0C73EA77B2D0000ULL,
    0x2ABA28A8CE790000ULL, 0x6D46EEA944E00000ULL, 0xA45FB9AAC7560000ULL, 0xE3A37FAB4DCF0000ULL,
    0x2B6D17ACDC270000ULL, 0x6C91D1AD56BE0000ULL, 0xA58886AED5080000ULL, 0xE27440AF5F910000ULL,
    0x2C72AAB0A2A00000ULL, 0x6B8E6CB128390000ULL, 0xA2973BB2AB8F0000ULL, 0xE56BFDB321160000ULL,
    0x2DA595B4B0FE0000ULL, 0x6A5953B53A670000ULL, 0xA34004B6B9D10000ULL, 0xE4BCC2B733480000ULL,
    0x2EC1D4B8861C0000ULL, 0x693D12B90C850000ULL, 0xA02445BA8F330000ULL, 0xE7D883BB05AA0000ULL,
    0x2F16EBBC94420000ULL, 0x68EA2DBD1EDB0000ULL, 0xA1F37ABE9D6D0000ULL, 0xE60FBCBF17F40000ULL,
    0x300E64C047860000ULL, 0x77F2A2C1CD1F0000ULL, 0xBEEBF5C24EA90000ULL, 0xF91733C3C4300000ULL,
    0x31D95BC455D80000ULL, 0x76259DC5DF410000ULL, 0xBF3CCAC65CF70000ULL, 0xF8C00CC7D66E0000ULL,
    0x32BD1AC8633A0000ULL, 0x7541DCC9E9A30000ULL, 0xBC588BCA6A150000ULL, 0xFBA44DCBE08C0000ULL,
    0x336A25CC71640000ULL, 0x7496E3CDFBFD0000ULL, 0xBD8FB4CE784B0000ULL, 0xFA7372CFF2D20000ULL,
    0x347598D00FE30000ULL, 0x73895ED1857A0000ULL, 0xBA9009D206CC0000ULL, 0xFD6CCFD38C550000ULL,
    0x35A2A7D41DBD0000ULL, 0x725E61D597240000ULL, 0xBB4736D614920000ULL, 0xFCBBF0D79E0B0000ULL,
    0x36C6E6D82B5F0000ULL, 0x713A20D9A1C60000ULL, 0xB82377DA22700000ULL, 0xFFDFB1DBA8E90000ULL,
    0x3711D9DC39010000ULL, 0x70ED1FDDB3980000ULL, 0xB9F448DE302E0000ULL, 0xFE088EDFBAB70000ULL,
    0x38F881E0D74C0000ULL, 0x7F0447E15DD50000ULL, 0xB61D10E2DE630000ULL, 0xF1E1D6E354FA0000ULL,
    0x392FBEE4C5120000ULL, 0x7ED378E54F8B0000ULL, 0xB7CA2FE6CC3D0000ULL, 0xF036E9E746A40000ULL,
    0x3A4BFFE8F3F00000ULL, 0x7DB739E979690000ULL, 0xB4AE6EEAFADF0000ULL, 0xF352A8EB70460000ULL,
    0x3B9CC0ECE1AE0000ULL, 0x7C6006ED6B370000ULL, 0xB57951EEE8810000ULL, 0xF28597EF62180000ULL,
    0x3C837DF09F290000ULL, 0x7B7FBBF115B00000ULL, 0xB266ECF296060000ULL, 0xF59A2AF31C9F0000ULL,
    0x3D5442F48D770000ULL, 0x7AA884F507EE0000ULL, 0xB3B1D3F684580000ULL, 0xF44D15F70EC10000ULL,
    0x3E3003F8BB950000ULL, 0x79CCC5F9310C0000ULL, 0xB0D592FAB2BA0000ULL, 0xF72954FB38230000ULL,
    0x3FE73CFCA9CB0000ULL, 0x781BFAFD23520000ULL, 0xB102ADFEA0E40000ULL, 0xF6FE6BFF2A7D0000ULL
};

char table_0[256] = { 0xA8, 0x43, 0x5F, 0x06, 0x6B, 0x75, 0x6C, 0x59, 0x71, 0xDF, 0x87, 0x95, 0x17, 0xF0, 0xD8, 0x09,
                      0x6D, 0xF3, 0x1D, 0xCB, 0xC9, 0x4D, 0x2C, 0xAF, 0x79, 0xE0, 0x97, 0xFD, 0x6F, 0x4B, 0x45, 0x39,
                      0x3E, 0xDD, 0xA3, 0x4F, 0xB4, 0xB6, 0x9A, 0x0E, 0x1F, 0xBF, 0x15, 0xE1, 0x49, 0xD2, 0x93, 0xC6,
                      0x92, 0x72, 0x9E, 0x61, 0xD1, 0x63, 0xFA, 0xEE, 0xF4, 0x19, 0xD5, 0xAD, 0x58, 0xA4, 0xBB, 0xA1,
                      0xDC, 0xF2, 0x83, 0x37, 0x42, 0xE4, 0x7A, 0x32, 0x9C, 0xCC, 0xAB, 0x4A, 0x8F, 0x6E, 0x04, 0x27,
                      0x2E, 0xE7, 0xE2, 0x5A, 0x96, 0x16, 0x23, 0x2B, 0xC2, 0x65, 0x66, 0x0F, 0xBC, 0xA9, 0x47, 0x41,
                      0x34, 0x48, 0xFC, 0xB7, 0x6A, 0x88, 0xA5, 0x53, 0x86, 0xF9, 0x5B, 0xDB, 0x38, 0x7B, 0xC3, 0x1E,
                      0x22, 0x33, 0x24, 0x28, 0x36, 0xC7, 0xB2, 0x3B, 0x8E, 0x77, 0xBA, 0xF5, 0x14, 0x9F, 0x08, 0x55,
                      0x9B, 0x4C, 0xFE, 0x60, 0x5C, 0xDA, 0x18, 0x46, 0xCD, 0x7D, 0x21, 0xB0, 0x3F, 0x1B, 0x89, 0xFF,
                      0xEB, 0x84, 0x69, 0x3A, 0x9D, 0xD7, 0xD3, 0x70, 0x67, 0x40, 0xB5, 0xDE, 0x5D, 0x30, 0x91, 0xB1,
                      0x78, 0x11, 0x01, 0xE5, 0x00, 0x68, 0x98, 0xA0, 0xC5, 0x02, 0xA6, 0x74, 0x2D, 0x0B, 0xA2, 0x76,
                      0xB3, 0xBE, 0xCE, 0xBD, 0xAE, 0xE9, 0x8A, 0x31, 0x1C, 0xEC, 0xF1, 0x99, 0x94, 0xAA, 0xF6, 0x26,
                      0x2F, 0xEF, 0xE8, 0x8C, 0x35, 0x03, 0xD4, 0x7F, 0xFB, 0x05, 0xC1, 0x5E, 0x90, 0x20, 0x3D, 0x82,
                      0xF7, 0xEA, 0x0A, 0x0D, 0x7E, 0xF8, 0x50, 0x1A, 0xC4, 0x07, 0x57, 0xB8, 0x3C, 0x62, 0xE3, 0xC8,
                      0xAC, 0x52, 0x64, 0x10, 0xD0, 0xD9, 0x13, 0x0C, 0x12, 0x29, 0x51, 0xB9, 0xCF, 0xD6, 0x73, 0x8D,
                      0x81, 0x54, 0xC0, 0xED, 0x4E, 0x44, 0xA7, 0x2A, 0x85, 0x25, 0xE6, 0xCA, 0x7C, 0x8B, 0x56, 0x80
                    };

char table_1[256] = { 0xCE, 0xBB, 0xEB, 0x92, 0xEA, 0xCB, 0x13, 0xC1, 0xE9, 0x3A, 0xD6, 0xB2, 0xD2, 0x90, 0x17, 0xF8,
                      0x42, 0x15, 0x56, 0xB4, 0x65, 0x1C, 0x88, 0x43, 0xC5, 0x5C, 0x36, 0xBA, 0xF5, 0x57, 0x67, 0x8D,
                      0x31, 0xF6, 0x64, 0x58, 0x9E, 0xF4, 0x22, 0xAA, 0x75, 0x0F, 0x02, 0xB1, 0xDF, 0x6D, 0x73, 0x4D,
                      0x7C, 0x26, 0x2E, 0xF7, 0x08, 0x5D, 0x44, 0x3E, 0x9F, 0x14, 0xC8, 0xAE, 0x54, 0x10, 0xD8, 0xBC,
                      0x1A, 0x6B, 0x69, 0xF3, 0xBD, 0x33, 0xAB, 0xFA, 0xD1, 0x9B, 0x68, 0x4E, 0x16, 0x95, 0x91, 0xEE,
                      0x4C, 0x63, 0x8E, 0x5B, 0xCC, 0x3C, 0x19, 0xA1, 0x81, 0x49, 0x7B, 0xD9, 0x6F, 0x37, 0x60, 0xCA,
                      0xE7, 0x2B, 0x48, 0xFD, 0x96, 0x45, 0xFC, 0x41, 0x12, 0x0D, 0x79, 0xE5, 0x89, 0x8C, 0xE3, 0x20,
                      0x30, 0xDC, 0xB7, 0x6C, 0x4A, 0xB5, 0x3F, 0x97, 0xD4, 0x62, 0x2D, 0x06, 0xA4, 0xA5, 0x83, 0x5F,
                      0x2A, 0xDA, 0xC9, 0x00, 0x7E, 0xA2, 0x55, 0xBF, 0x11, 0xD5, 0x9C, 0xCF, 0x0E, 0x0A, 0x3D, 0x51,
                      0x7D, 0x93, 0x1B, 0xFE, 0xC4, 0x47, 0x09, 0x86, 0x0B, 0x8F, 0x9D, 0x6A, 0x07, 0xB9, 0xB0, 0x98,
                      0x18, 0x32, 0x71, 0x4B, 0xEF, 0x3B, 0x70, 0xA0, 0xE4, 0x40, 0xFF, 0xC3, 0xA9, 0xE6, 0x78, 0xF9,
                      0x8B, 0x46, 0x80, 0x1E, 0x38, 0xE1, 0xB8, 0xA8, 0xE0, 0x0C, 0x23, 0x76, 0x1D, 0x25, 0x24, 0x05,
                      0xF1, 0x6E, 0x94, 0x28, 0x9A, 0x84, 0xE8, 0xA3, 0x4F, 0x77, 0xD3, 0x85, 0xE2, 0x52, 0xF2, 0x82,
                      0x50, 0x7A, 0x2F, 0x74, 0x53, 0xB3, 0x61, 0xAF, 0x39, 0x35, 0xDE, 0xCD, 0x1F, 0x99, 0xAC, 0xAD,
                      0x72, 0x2C, 0xDD, 0xD0, 0x87, 0xBE, 0x5E, 0xA6, 0xEC, 0x04, 0xC6, 0x03, 0x34, 0xFB, 0xDB, 0x59,
                      0xB6, 0xC2, 0x01, 0xF0, 0x5A, 0xED, 0xA7, 0x66, 0x21, 0x7F, 0x8A, 0x27, 0xC7, 0xC0, 0x29, 0xD7
                    };

char table_2[256] = { 0x93, 0xD9, 0x9A, 0xB5, 0x98, 0x22, 0x45, 0xFC, 0xBA, 0x6A, 0xDF, 0x02, 0x9F, 0xDC, 0x51, 0x59,
                      0x4A, 0x17, 0x2B, 0xC2, 0x94, 0xF4, 0xBB, 0xA3, 0x62, 0xE4, 0x71, 0xD4, 0xCD, 0x70, 0x16, 0xE1,
                      0x49, 0x3C, 0xC0, 0xD8, 0x5C, 0x9B, 0xAD, 0x85, 0x53, 0xA1, 0x7A, 0xC8, 0x2D, 0xE0, 0xD1, 0x72,
                      0xA6, 0x2C, 0xC4, 0xE3, 0x76, 0x78, 0xB7, 0xB4, 0x09, 0x3B, 0x0E, 0x41, 0x4C, 0xDE, 0xB2, 0x90,
                      0x25, 0xA5, 0xD7, 0x03, 0x11, 0x00, 0xC3, 0x2E, 0x92, 0xEF, 0x4E, 0x12, 0x9D, 0x7D, 0xCB, 0x35,
                      0x10, 0xD5, 0x4F, 0x9E, 0x4D, 0xA9, 0x55, 0xC6, 0xD0, 0x7B, 0x18, 0x97, 0xD3, 0x36, 0xE6, 0x48,
                      0x56, 0x81, 0x8F, 0x77, 0xCC, 0x9C, 0xB9, 0xE2, 0xAC, 0xB8, 0x2F, 0x15, 0xA4, 0x7C, 0xDA, 0x38,
                      0x1E, 0x0B, 0x05, 0xD6, 0x14, 0x6E, 0x6C, 0x7E, 0x66, 0xFD, 0xB1, 0xE5, 0x60, 0xAF, 0x5E, 0x33,
                      0x87, 0xC9, 0xF0, 0x5D, 0x6D, 0x3F, 0x88, 0x8D, 0xC7, 0xF7, 0x1D, 0xE9, 0xEC, 0xED, 0x80, 0x29,
                      0x27, 0xCF, 0x99, 0xA8, 0x50, 0x0F, 0x37, 0x24, 0x28, 0x30, 0x95, 0xD2, 0x3E, 0x5B, 0x40, 0x83,
                      0xB3, 0x69, 0x57, 0x1F, 0x07, 0x1C, 0x8A, 0xBC, 0x20, 0xEB, 0xCE, 0x8E, 0xAB, 0xEE, 0x31, 0xA2,
                      0x73, 0xF9, 0xCA, 0x3A, 0x1A, 0xFB, 0x0D, 0xC1, 0xFE, 0xFA, 0xF2, 0x6F, 0xBD, 0x96, 0xDD, 0x43,
                      0x52, 0xB6, 0x08, 0xF3, 0xAE, 0xBE, 0x19, 0x89, 0x32, 0x26, 0xB0, 0xEA, 0x4B, 0x64, 0x84, 0x82,
                      0x6B, 0xF5, 0x79, 0xBF, 0x01, 0x5F, 0x75, 0x63, 0x1B, 0x23, 0x3D, 0x68, 0x2A, 0x65, 0xE8, 0x91,
                      0xF6, 0xFF, 0x13, 0x58, 0xF1, 0x47, 0x0A, 0x7F, 0xC5, 0xA7, 0xE7, 0x61, 0x5A, 0x06, 0x46, 0x44,
                      0x42, 0x04, 0xA0, 0xDB, 0x39, 0x86, 0x54, 0xAA, 0x8C, 0x34, 0x21, 0x8B, 0xF8, 0x0C, 0x74, 0x67
                    };

char table_3[256] = { 0x68, 0x8D, 0xCA, 0x4D, 0x73, 0x4B, 0x4E, 0x2A, 0xD4, 0x52, 0x26, 0xB3, 0x54, 0x1E, 0x19, 0x1F,
                      0x22, 0x03, 0x46, 0x3D, 0x2D, 0x4A, 0x53, 0x83, 0x13, 0x8A, 0xB7, 0xD5, 0x25, 0x79, 0xF5, 0xBD,
                      0x58, 0x2F, 0x0D, 0x02, 0xED, 0x51, 0x9E, 0x11, 0xF2, 0x3E, 0x55, 0x5E, 0xD1, 0x16, 0x3C, 0x66,
                      0x70, 0x5D, 0xF3, 0x45, 0x40, 0xCC, 0xE8, 0x94, 0x56, 0x08, 0xCE, 0x1A, 0x3A, 0xD2, 0xE1, 0xDF,
                      0xB5, 0x38, 0x6E, 0x0E, 0xE5, 0xF4, 0xF9, 0x86, 0xE9, 0x4F, 0xD6, 0x85, 0x23, 0xCF, 0x32, 0x99,
                      0x31, 0x14, 0xAE, 0xEE, 0xC8, 0x48, 0xD3, 0x30, 0xA1, 0x92, 0x41, 0xB1, 0x18, 0xC4, 0x2C, 0x71,
                      0x72, 0x44, 0x15, 0xFD, 0x37, 0xBE, 0x5F, 0xAA, 0x9B, 0x88, 0xD8, 0xAB, 0x89, 0x9C, 0xFA, 0x60,
                      0xEA, 0xBC, 0x62, 0x0C, 0x24, 0xA6, 0xA8, 0xEC, 0x67, 0x20, 0xDB, 0x7C, 0x28, 0xDD, 0xAC, 0x5B,
                      0x34, 0x7E, 0x10, 0xF1, 0x7B, 0x8F, 0x63, 0xA0, 0x05, 0x9A, 0x43, 0x77, 0x21, 0xBF, 0x27, 0x09,
                      0xC3, 0x9F, 0xB6, 0xD7, 0x29, 0xC2, 0xEB, 0xC0, 0xA4, 0x8B, 0x8C, 0x1D, 0xFB, 0xFF, 0xC1, 0xB2,
                      0x97, 0x2E, 0xF8, 0x65, 0xF6, 0x75, 0x07, 0x04, 0x49, 0x33, 0xE4, 0xD9, 0xB9, 0xD0, 0x42, 0xC7,
                      0x6C, 0x90, 0x00, 0x8E, 0x6F, 0x50, 0x01, 0xC5, 0xDA, 0x47, 0x3F, 0xCD, 0x69, 0xA2, 0xE2, 0x7A,
                      0xA7, 0xC6, 0x93, 0x0F, 0x0A, 0x06, 0xE6, 0x2B, 0x96, 0xA3, 0x1C, 0xAF, 0x6A, 0x12, 0x84, 0x39,
                      0xE7, 0xB0, 0x82, 0xF7, 0xFE, 0x9D, 0x87, 0x5C, 0x81, 0x35, 0xDE, 0xB4, 0xA5, 0xFC, 0x80, 0xEF,
                      0xCB, 0xBB, 0x6B, 0x76, 0xBA, 0x5A, 0x7D, 0x78, 0x0B, 0x95, 0xE3, 0xAD, 0x74, 0x98, 0x3B, 0x36,
                      0x64, 0x6D, 0xDC, 0xF0, 0x59, 0xA9, 0x4C, 0x17, 0x7F, 0x91, 0xB8, 0xC9, 0x57, 0x1B, 0xE0, 0x61
                    };
/*************************************************/
typedef struct {
    UINT    a[16],
            b[2],
            Key[8],
            Init_Vec[4],
            Str;

    unsigned __int8 KeySize; // Key size in bytes

} STRUMOK_DATA;

/************************************************/
int initialization(STRUMOK_DATA &state);
int next_state(STRUMOK_DATA &state, bool mod);


UINT stream(STRUMOK_DATA &state);
UINT fsm(UINT a, UINT b_0, UINT b_1);
UINT T(UINT b_0);
UINT alpha(UINT a);
UINT alpha_inv(UINT a);

int mulpol_16(char pol_1, char pol_2);
int divpol_X8_X4_X3_X_1(int pol_1);


int main()
{

    FILE *f_init,
         * f_stream,
         * f_next_state,
         * f_fsm,
         * f_T,
         * f_alpha;
    ;
    fopen_s(&f_init, "init.csv", "wb");
    fopen_s(&f_stream, "stream.csv", "wb");
    fopen_s(&f_next_state, "next_state.csv", "wb");
    fopen_s(&f_fsm, "fsm.csv", "wb");
    fopen_s(&f_T, "T.csv", "wb");
    fopen_s(&f_alpha, "alpha.csv", "wb");
    unsigned int time_values[100];
    STRUMOK_DATA strumok;

    strumok.Init_Vec[0] = 1;
    strumok.Init_Vec[1] = 2;
    strumok.Init_Vec[2] = 3;
    strumok.Init_Vec[3] = 4;

    strumok.KeySize = 64;


    strumok.Key[7] = 0x8000000000000000;
    strumok.Key[6] = 0x0000000000000000;
    strumok.Key[5] = 0x0000000000000000;
    strumok.Key[4] = 0x0000000000000000;
    strumok.Key[3] = 0x0000000000000000;
    strumok.Key[2] = 0x0000000000000000;
    strumok.Key[1] = 0x0000000000000000;
    strumok.Key[0] = 0x0000000000000000;

    unsigned __int64    start_init,
             fin_init;



    for (int i = 0; i < 100; i++) {
        start_init = __rdtsc();
        initialization(strumok);
        fin_init = __rdtsc();
        time_values[i] = (fin_init - start_init) / CPU_FREQ; //result nanoseconds 10^(-9)
        fprintf(f_init, "%u", time_values[i]);
        fprintf(f_init, "\n");
    }

    for (int i = 0; i < 100; i++) {
        start_init = __rdtsc();
        next_state(strumok, false);
        fin_init = __rdtsc();
        time_values[i] = (fin_init - start_init) / CPU_FREQ; //result nanoseconds 10^(-9)
        fprintf(f_stream, "%u", time_values[i]);
        fprintf(f_stream, "\n");
    }

    for (int i = 0; i < 100; i++) {
        start_init = __rdtsc();
        next_state(strumok, false);
        fin_init = __rdtsc();
        time_values[i] = (fin_init - start_init) / CPU_FREQ; //result nanoseconds 10^(-9)
        fprintf(f_next_state, "%u", time_values[i]);
        fprintf(f_next_state, "\n");
    }

    for (int i = 0; i < 100; i++) {
        start_init = __rdtsc();
        fsm(0, 0, 0);
        fin_init = __rdtsc();
        time_values[i] = (fin_init - start_init) / CPU_FREQ; //result nanoseconds 10^(-9)
        fprintf(f_fsm, "%u", time_values[i]);
        fprintf(f_fsm, "\n");
    }

    for (int i = 0; i < 100; i++) {
        start_init = __rdtsc();
        stream(strumok);
        T(0);
        fin_init = __rdtsc();
        time_values[i] = (fin_init - start_init) / CPU_FREQ; //result nanoseconds 10^(-9)
        fprintf(f_T, "%u", time_values[i]);
        fprintf(f_T, "\n");
    }

    for (int i = 0; i < 100; i++) {
        start_init = __rdtsc();
        stream(strumok);
        alpha(0);
        fin_init = __rdtsc();
        time_values[i] = (fin_init - start_init) / CPU_FREQ; //result nanoseconds 10^(-9)
        fprintf(f_alpha, "%u", time_values[i]);
        fprintf(f_alpha, "\n");
    }
    _fcloseall();


    return 0;
}

int initialization(STRUMOK_DATA &state)
{
    if (state.KeySize == 32) {
        state.a[0] = state.Key[3] ^ state.Init_Vec[0];
        state.a[1] = state.Key[2];
        state.a[2] = state.Key[1] ^ state.Init_Vec[1];
        state.a[3] = state.Key[0] ^ state.Init_Vec[2];
        state.a[4] = state.Key[3];
        state.a[5] = state.Key[2] ^ state.Init_Vec[3];
        state.a[6] = ~state.Key[1];
        state.a[7] = ~state.Key[0];
        state.a[8] = state.Key[3];
        state.a[9] = state.Key[2];
        state.a[10] = ~state.Key[1];
        state.a[11] = state.Key[0];
        state.a[12] = state.Key[3];
        state.a[13] = ~state.Key[2];
        state.a[14] = state.Key[1];
        state.a[15] = ~state.Key[0];
    } else if (state.KeySize == 64) {
        state.a[0] = state.Key[7] ^ state.Init_Vec[0];
        state.a[1] = state.Key[6];
        state.a[2] = state.Key[5];
        state.a[3] = state.Key[4] ^ state.Init_Vec[1];
        state.a[4] = state.Key[3];
        state.a[5] = state.Key[2] ^ state.Init_Vec[2];
        state.a[6] = state.Key[1];
        state.a[7] = ~state.Key[0];
        state.a[8] = state.Key[4] ^ state.Init_Vec[3];
        state.a[9] = ~state.Key[6];
        state.a[10] = state.Key[5];
        state.a[11] = ~state.Key[7];
        state.a[12] = state.Key[3];
        state.a[13] = state.Key[2];
        state.a[14] = ~state.Key[1];
        state.a[15] = state.Key[0];
    }

    state.b[0] = 0;
    state.b[1] = 0;

    for (int i = 0; i < 32; i++) {
        next_state(state, INIT_MOD);
    }

    return 0;
}
int next_state(STRUMOK_DATA &state, bool mod)
{
    UINT ftmpr1 = state.b[0];
    UINT ftmpr2 = state.b[1];
    state.b[1] = T(state.b[0]);
    state.b[0] = ftmpr2 + state.a[13];

    UINT ftmps15 = state.a[15];

    if (!mod) {
        state.a[15] = a_mul(state.a[0]) ^ state.a[13] ^ ainv_mul(state.a[11]);
    } else {
        state.a[15] = a_mul(state.a[0]) ^ state.a[13] ^ ainv_mul(state.a[11])
                ^ fsm(state.a[15], ftmpr1, ftmpr2);
    }
    for (int i = 0; i < 14; i++) {
        state.a[i] = state.a[i + 1];
    }
    state.a[14] = ftmps15;

    return 0;
}
UINT stream(STRUMOK_DATA &state)
{
    return fsm(state.a[15], state.b[0], state.b[1]) ^ state.a[0];
}
UINT fsm(UINT a, UINT b_0, UINT b_1)
{
    return (a + b_0) ^ b_1;
}
UINT T(UINT b_0)
{
    unsigned char B_0[8],
             Exit_B_0[8];

    for (int i = 0; i < 8; i++) {
        B_0[i] = b_0 >> i * 8;
    }

    B_0[0] = table_0[B_0[0]];
    B_0[1] = table_1[B_0[1]];
    B_0[2] = table_2[B_0[2]];
    B_0[3] = table_3[B_0[3]];
    B_0[4] = table_0[B_0[4]];
    B_0[5] = table_1[B_0[5]];
    B_0[6] = table_2[B_0[6]];
    B_0[7] = table_3[B_0[7]];

    static char mdr_code[64] = { 0x01 , 0x01 , 0x05 , 0x01 , 0x08 , 0x06 , 0x07 , 0x04,
                                 0x04 , 0x01 , 0x01 , 0x05 , 0x01 , 0x08 , 0x06 , 0x07,
                                 0x07 , 0x04 , 0x01 , 0x01 , 0x05 , 0x01 , 0x08 , 0x06,
                                 0x06 , 0x07 , 0x04 , 0x01 , 0x01 , 0x05 , 0x01 , 0x08,
                                 0x08 , 0x06 , 0x07 , 0x04 , 0x01 , 0x01 , 0x05 , 0x01,
                                 0x01 , 0x08 , 0x06 , 0x07 , 0x04 , 0x01 , 0x01 , 0x05,
                                 0x05 , 0x01 , 0x08 , 0x06 , 0x07 , 0x04 , 0x01 , 0x01,
                                 0x01 , 0x05 , 0x01 , 0x08 , 0x06 , 0x07 , 0x04 , 0x01
                               };

    for (int i = 0; i < 8; i++) {
        int dividend = 0;
        for (int j = 0; j < 8; j++) {
            dividend ^= mulpol_16(B_0[j], mdr_code[8 * i + j]);
        }
        Exit_B_0[i] = divpol_X8_X4_X3_X_1(dividend);
    }

    UINT returner = 0;

    for (int i = 0; i < 8; i++) {
        returner = (returner << 8) ^ Exit_B_0[7 - i];
    }

    return returner;
}

UINT alpha(UINT a)
{
    return 0;
}
UINT alpha_inv(UINT a)
{
    return 0;
}


int mulpol_16(char pol_1, char pol_2)
{
    int derivative_pol = 0;
    for (int i = 0; i < 8; i++)
        if ((pol_1 >> i) & 0x01) {
            derivative_pol ^= (((int)(pol_2) & 0xFF) << i);
        }
    return derivative_pol;
}
int divpol_X8_X4_X3_X_1(int pol_1)
{
    int derivative_pol = pol_1;
    for (int i = 0; i < 8; i++)
        if (derivative_pol >> (15 - i) & 0x01) {
            derivative_pol ^= (0x011D << (7 - i));
        }
    return derivative_pol;
}
