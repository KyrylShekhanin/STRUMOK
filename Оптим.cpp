#include <iostream>
#include <intrin.h>
using namespace std;

#define UINT unsigned __int64
#define INIT_MOD true
#define CPU_FREQ 2.5

#define ainv_mul(w) (((w)>>8)^w)
#define a_mul(w)	(((w)<<8)^w)

/*************************************************/
//table
char table_0[256] = { 0xA8, 0x43, 0x5F, 0x06, 0x6B, 0x75, 0x6C, 0x59, 0x71, 0xDF, 0x87, 0x95, 0x17, 0xF0, 0xD8, 0x09,
0x6D, 0xF3, 0x1D, 0xCB, 0xC9, 0x4D, 0x2C, 0xAF, 0x79, 0xE0, 0x97, 0xFD, 0x6F, 0x4B, 0x45, 0x39,
0x3E, 0xDD, 0xA3, 0x4F, 0xB4, 0xB6, 0x9A, 0x0E, 0x1F, 0xBF, 0x15, 0xE1, 0x49, 0xD2, 0x93, 0xC6,
0x92, 0x72, 0x9E, 0x61, 0xD1, 0x63, 0xFA, 0xEE, 0xF4, 0x19, 0xD5, 0xAD, 0x58, 0xA4, 0xBB, 0xA1,
0xDC, 0xF2, 0x83, 0x37, 0x42, 0xE4, 0x7A, 0x32, 0x9C, 0xCC, 0xAB, 0x4A, 0x8F, 0x6E, 0x04, 0x27,
0x2E, 0xE7, 0xE2, 0x5A, 0x96, 0x16, 0x23, 0x2B, 0xC2, 0x65, 0x66, 0x0F, 0xBC, 0xA9, 0x47, 0x41,
0x34, 0x48, 0xFC, 0xB7, 0x6A, 0x88, 0xA5, 0x53, 0x86, 0xF9, 0x5B, 0xDB, 0x38, 0x7B, 0xC3, 0x1E,
0x22, 0x33, 0x24, 0x28, 0x36, 0xC7, 0xB2, 0x3B, 0x8E, 0x77, 0xBA, 0xF5, 0x14, 0x9F, 0x08, 0x55,
0x9B, 0x4C, 0xFE, 0x60, 0x5C, 0xDA, 0x18, 0x46, 0xCD, 0x7D, 0x21, 0xB0, 0x3F, 0x1B, 0x89, 0xFF,
0xEB, 0x84, 0x69, 0x3A, 0x9D, 0xD7, 0xD3, 0x70, 0x67, 0x40, 0xB5, 0xDE, 0x5D, 0x30, 0x91, 0xB1,
0x78, 0x11, 0x01, 0xE5, 0x00, 0x68, 0x98, 0xA0, 0xC5, 0x02, 0xA6, 0x74, 0x2D, 0x0B, 0xA2, 0x76,
0xB3, 0xBE, 0xCE, 0xBD, 0xAE, 0xE9, 0x8A, 0x31, 0x1C, 0xEC, 0xF1, 0x99, 0x94, 0xAA, 0xF6, 0x26,
0x2F, 0xEF, 0xE8, 0x8C, 0x35, 0x03, 0xD4, 0x7F, 0xFB, 0x05, 0xC1, 0x5E, 0x90, 0x20, 0x3D, 0x82,
0xF7, 0xEA, 0x0A, 0x0D, 0x7E, 0xF8, 0x50, 0x1A, 0xC4, 0x07, 0x57, 0xB8, 0x3C, 0x62, 0xE3, 0xC8,
0xAC, 0x52, 0x64, 0x10, 0xD0, 0xD9, 0x13, 0x0C, 0x12, 0x29, 0x51, 0xB9, 0xCF, 0xD6, 0x73, 0x8D,
0x81, 0x54, 0xC0, 0xED, 0x4E, 0x44, 0xA7, 0x2A, 0x85, 0x25, 0xE6, 0xCA, 0x7C, 0x8B, 0x56, 0x80 };

char table_1[256] = { 0xCE, 0xBB, 0xEB, 0x92, 0xEA, 0xCB, 0x13, 0xC1, 0xE9, 0x3A, 0xD6, 0xB2, 0xD2, 0x90, 0x17, 0xF8,
0x42, 0x15, 0x56, 0xB4, 0x65, 0x1C, 0x88, 0x43, 0xC5, 0x5C, 0x36, 0xBA, 0xF5, 0x57, 0x67, 0x8D,
0x31, 0xF6, 0x64, 0x58, 0x9E, 0xF4, 0x22, 0xAA, 0x75, 0x0F, 0x02, 0xB1, 0xDF, 0x6D, 0x73, 0x4D,
0x7C, 0x26, 0x2E, 0xF7, 0x08, 0x5D, 0x44, 0x3E, 0x9F, 0x14, 0xC8, 0xAE, 0x54, 0x10, 0xD8, 0xBC,
0x1A, 0x6B, 0x69, 0xF3, 0xBD, 0x33, 0xAB, 0xFA, 0xD1, 0x9B, 0x68, 0x4E, 0x16, 0x95, 0x91, 0xEE,
0x4C, 0x63, 0x8E, 0x5B, 0xCC, 0x3C, 0x19, 0xA1, 0x81, 0x49, 0x7B, 0xD9, 0x6F, 0x37, 0x60, 0xCA,
0xE7, 0x2B, 0x48, 0xFD, 0x96, 0x45, 0xFC, 0x41, 0x12, 0x0D, 0x79, 0xE5, 0x89, 0x8C, 0xE3, 0x20,
0x30, 0xDC, 0xB7, 0x6C, 0x4A, 0xB5, 0x3F, 0x97, 0xD4, 0x62, 0x2D, 0x06, 0xA4, 0xA5, 0x83, 0x5F,
0x2A, 0xDA, 0xC9, 0x00, 0x7E, 0xA2, 0x55, 0xBF, 0x11, 0xD5, 0x9C, 0xCF, 0x0E, 0x0A, 0x3D, 0x51,
0x7D, 0x93, 0x1B, 0xFE, 0xC4, 0x47, 0x09, 0x86, 0x0B, 0x8F, 0x9D, 0x6A, 0x07, 0xB9, 0xB0, 0x98,
0x18, 0x32, 0x71, 0x4B, 0xEF, 0x3B, 0x70, 0xA0, 0xE4, 0x40, 0xFF, 0xC3, 0xA9, 0xE6, 0x78, 0xF9,
0x8B, 0x46, 0x80, 0x1E, 0x38, 0xE1, 0xB8, 0xA8, 0xE0, 0x0C, 0x23, 0x76, 0x1D, 0x25, 0x24, 0x05,
0xF1, 0x6E, 0x94, 0x28, 0x9A, 0x84, 0xE8, 0xA3, 0x4F, 0x77, 0xD3, 0x85, 0xE2, 0x52, 0xF2, 0x82,
0x50, 0x7A, 0x2F, 0x74, 0x53, 0xB3, 0x61, 0xAF, 0x39, 0x35, 0xDE, 0xCD, 0x1F, 0x99, 0xAC, 0xAD,
0x72, 0x2C, 0xDD, 0xD0, 0x87, 0xBE, 0x5E, 0xA6, 0xEC, 0x04, 0xC6, 0x03, 0x34, 0xFB, 0xDB, 0x59,
0xB6, 0xC2, 0x01, 0xF0, 0x5A, 0xED, 0xA7, 0x66, 0x21, 0x7F, 0x8A, 0x27, 0xC7, 0xC0, 0x29, 0xD7 };

char table_2[256] = { 0x93, 0xD9, 0x9A, 0xB5, 0x98, 0x22, 0x45, 0xFC, 0xBA, 0x6A, 0xDF, 0x02, 0x9F, 0xDC, 0x51, 0x59,
0x4A, 0x17, 0x2B, 0xC2, 0x94, 0xF4, 0xBB, 0xA3, 0x62, 0xE4, 0x71, 0xD4, 0xCD, 0x70, 0x16, 0xE1,
0x49, 0x3C, 0xC0, 0xD8, 0x5C, 0x9B, 0xAD, 0x85, 0x53, 0xA1, 0x7A, 0xC8, 0x2D, 0xE0, 0xD1, 0x72,
0xA6, 0x2C, 0xC4, 0xE3, 0x76, 0x78, 0xB7, 0xB4, 0x09, 0x3B, 0x0E, 0x41, 0x4C, 0xDE, 0xB2, 0x90,
0x25, 0xA5, 0xD7, 0x03, 0x11, 0x00, 0xC3, 0x2E, 0x92, 0xEF, 0x4E, 0x12, 0x9D, 0x7D, 0xCB, 0x35,
0x10, 0xD5, 0x4F, 0x9E, 0x4D, 0xA9, 0x55, 0xC6, 0xD0, 0x7B, 0x18, 0x97, 0xD3, 0x36, 0xE6, 0x48,
0x56, 0x81, 0x8F, 0x77, 0xCC, 0x9C, 0xB9, 0xE2, 0xAC, 0xB8, 0x2F, 0x15, 0xA4, 0x7C, 0xDA, 0x38,
0x1E, 0x0B, 0x05, 0xD6, 0x14, 0x6E, 0x6C, 0x7E, 0x66, 0xFD, 0xB1, 0xE5, 0x60, 0xAF, 0x5E, 0x33,
0x87, 0xC9, 0xF0, 0x5D, 0x6D, 0x3F, 0x88, 0x8D, 0xC7, 0xF7, 0x1D, 0xE9, 0xEC, 0xED, 0x80, 0x29,
0x27, 0xCF, 0x99, 0xA8, 0x50, 0x0F, 0x37, 0x24, 0x28, 0x30, 0x95, 0xD2, 0x3E, 0x5B, 0x40, 0x83,
0xB3, 0x69, 0x57, 0x1F, 0x07, 0x1C, 0x8A, 0xBC, 0x20, 0xEB, 0xCE, 0x8E, 0xAB, 0xEE, 0x31, 0xA2,
0x73, 0xF9, 0xCA, 0x3A, 0x1A, 0xFB, 0x0D, 0xC1, 0xFE, 0xFA, 0xF2, 0x6F, 0xBD, 0x96, 0xDD, 0x43,
0x52, 0xB6, 0x08, 0xF3, 0xAE, 0xBE, 0x19, 0x89, 0x32, 0x26, 0xB0, 0xEA, 0x4B, 0x64, 0x84, 0x82,
0x6B, 0xF5, 0x79, 0xBF, 0x01, 0x5F, 0x75, 0x63, 0x1B, 0x23, 0x3D, 0x68, 0x2A, 0x65, 0xE8, 0x91,
0xF6, 0xFF, 0x13, 0x58, 0xF1, 0x47, 0x0A, 0x7F, 0xC5, 0xA7, 0xE7, 0x61, 0x5A, 0x06, 0x46, 0x44,
0x42, 0x04, 0xA0, 0xDB, 0x39, 0x86, 0x54, 0xAA, 0x8C, 0x34, 0x21, 0x8B, 0xF8, 0x0C, 0x74, 0x67 };

char table_3[256] = { 0x68, 0x8D, 0xCA, 0x4D, 0x73, 0x4B, 0x4E, 0x2A, 0xD4, 0x52, 0x26, 0xB3, 0x54, 0x1E, 0x19, 0x1F,
0x22, 0x03, 0x46, 0x3D, 0x2D, 0x4A, 0x53, 0x83, 0x13, 0x8A, 0xB7, 0xD5, 0x25, 0x79, 0xF5, 0xBD,
0x58, 0x2F, 0x0D, 0x02, 0xED, 0x51, 0x9E, 0x11, 0xF2, 0x3E, 0x55, 0x5E, 0xD1, 0x16, 0x3C, 0x66,
0x70, 0x5D, 0xF3, 0x45, 0x40, 0xCC, 0xE8, 0x94, 0x56, 0x08, 0xCE, 0x1A, 0x3A, 0xD2, 0xE1, 0xDF,
0xB5, 0x38, 0x6E, 0x0E, 0xE5, 0xF4, 0xF9, 0x86, 0xE9, 0x4F, 0xD6, 0x85, 0x23, 0xCF, 0x32, 0x99,
0x31, 0x14, 0xAE, 0xEE, 0xC8, 0x48, 0xD3, 0x30, 0xA1, 0x92, 0x41, 0xB1, 0x18, 0xC4, 0x2C, 0x71,
0x72, 0x44, 0x15, 0xFD, 0x37, 0xBE, 0x5F, 0xAA, 0x9B, 0x88, 0xD8, 0xAB, 0x89, 0x9C, 0xFA, 0x60,
0xEA, 0xBC, 0x62, 0x0C, 0x24, 0xA6, 0xA8, 0xEC, 0x67, 0x20, 0xDB, 0x7C, 0x28, 0xDD, 0xAC, 0x5B,
0x34, 0x7E, 0x10, 0xF1, 0x7B, 0x8F, 0x63, 0xA0, 0x05, 0x9A, 0x43, 0x77, 0x21, 0xBF, 0x27, 0x09,
0xC3, 0x9F, 0xB6, 0xD7, 0x29, 0xC2, 0xEB, 0xC0, 0xA4, 0x8B, 0x8C, 0x1D, 0xFB, 0xFF, 0xC1, 0xB2,
0x97, 0x2E, 0xF8, 0x65, 0xF6, 0x75, 0x07, 0x04, 0x49, 0x33, 0xE4, 0xD9, 0xB9, 0xD0, 0x42, 0xC7,
0x6C, 0x90, 0x00, 0x8E, 0x6F, 0x50, 0x01, 0xC5, 0xDA, 0x47, 0x3F, 0xCD, 0x69, 0xA2, 0xE2, 0x7A,
0xA7, 0xC6, 0x93, 0x0F, 0x0A, 0x06, 0xE6, 0x2B, 0x96, 0xA3, 0x1C, 0xAF, 0x6A, 0x12, 0x84, 0x39,
0xE7, 0xB0, 0x82, 0xF7, 0xFE, 0x9D, 0x87, 0x5C, 0x81, 0x35, 0xDE, 0xB4, 0xA5, 0xFC, 0x80, 0xEF,
0xCB, 0xBB, 0x6B, 0x76, 0xBA, 0x5A, 0x7D, 0x78, 0x0B, 0x95, 0xE3, 0xAD, 0x74, 0x98, 0x3B, 0x36,
0x64, 0x6D, 0xDC, 0xF0, 0x59, 0xA9, 0x4C, 0x17, 0x7F, 0x91, 0xB8, 0xC9, 0x57, 0x1B, 0xE0, 0x61 };
/*************************************************/
typedef struct
{
	UINT	a[16],
		b[2],
		Key[8],
		Init_Vec[4],
		Str;

	unsigned __int8	KeySize;

}STRUMOK_DATA;

/************************************************/
int initialization(STRUMOK_DATA &state);
int next_state_stream(STRUMOK_DATA &state, UINT * &out_stream);


UINT fsm(UINT a, UINT b_0, UINT b_1);
UINT T(UINT b_0);
UINT alpha(UINT a);
UINT alpha_inv(UINT a);

int mulpol_16(char pol_1, char pol_2);
int divpol_X8_X4_X3_X_1(int pol_1);


int main()
{

	FILE*f_init,
		*f_stream,
		*f_next_state,
		*f_fsm,
		*f_T,
		*f_alpha;
	;
	fopen_s(&f_init, "init.csv", "wb");
	fopen_s(&f_stream, "stream.csv", "wb");
	fopen_s(&f_next_state, "next_state.csv", "wb");
	fopen_s(&f_fsm, "fsm.csv", "wb");
	fopen_s(&f_T, "T.csv", "wb");
	fopen_s(&f_alpha, "alpha.csv", "wb");
	unsigned int time_values[100];
	STRUMOK_DATA strumok;

	strumok.Init_Vec[0] = 0;
	strumok.Init_Vec[1] = 0;
	strumok.Init_Vec[2] = 0;
	strumok.Init_Vec[3] = 0;

	strumok.KeySize = 256;

	strumok.Key[3] = 0x8000000080000000;
	strumok.Key[2] = 0x0000000080000000;
	strumok.Key[1] = 0x0000000080000000;
	strumok.Key[0] = 0x0000000080000000;

	unsigned __int64	start_init,
						  fin_init;

	UINT *out = new UINT[16];



	for (int i = 0; i < 100; i++)
	{
		start_init = __rdtsc();
		initialization(strumok);
		fin_init = __rdtsc();
		time_values[i] = (fin_init - start_init) / CPU_FREQ; //result nanoseconds 10^(-9)
		fprintf(f_init, "%u", time_values[i]);
		fprintf(f_init, "\n");
	}

	for (int i = 0; i < 100; i++)
	{
		start_init = __rdtsc();
		next_state_stream(strumok, out);
		fin_init = __rdtsc();
		time_values[i] = (fin_init - start_init) / CPU_FREQ; //result nanoseconds 10^(-9)
		fprintf(f_stream, "%u", time_values[i]);
		fprintf(f_stream, "\n");
	}

	for (int i = 0; i < 100; i++)
	{
		start_init = __rdtsc();
		T(0x85);
		fin_init = __rdtsc();
		time_values[i] = (fin_init - start_init) / CPU_FREQ; //result nanoseconds 10^(-9)
		fprintf(f_T, "%u", time_values[i]);
		fprintf(f_T, "\n");
	}

	for (int i = 0; i < 100; i++)
	{
		start_init = __rdtsc();
		alpha(0);
		fin_init = __rdtsc();
		time_values[i] = (fin_init - start_init) / CPU_FREQ; //result nanoseconds 10^(-9)
		fprintf(f_alpha, "%u", time_values[i]);
		fprintf(f_alpha, "\n");
	}
	_fcloseall();


	return 0;
}

int initialization(STRUMOK_DATA &state)
{
		for (int i = 0; i < 8; i++)
		{
			state.a[15 - i] = state.Key[7 - i];
			state.a[7 - i] = ~state.Key[7 - i];
		}
	state.a[15] ^= state.Init_Vec[0];
	state.a[12] ^= state.Init_Vec[1];
	state.a[10] ^= state.Init_Vec[2];
	state.a[0]  ^= state.Init_Vec[3];

	state.b[0] = state.b[1] = 0;

	for (int i = 0; i<2; i++)
	{
		static UINT	outfrom_fsm,
			fsmtmp;

		outfrom_fsm = (state.b[0] + state.a[15]) ^ state.b[1];
		state.a[0] = a_mul(state.a[0]) ^ state.a[2] ^ ainv_mul(state.a[11]) ^ outfrom_fsm;
		fsmtmp = state.b[1] + state.a[5];
		state.b[1] = T(state.b[0]);
		state.b[0] = fsmtmp;

		outfrom_fsm = (state.b[0] + state.a[0]) ^ state.b[1];
		state.a[1] = a_mul(state.a[1]) ^ state.a[3] ^ ainv_mul(state.a[12]) ^ outfrom_fsm;
		fsmtmp = state.b[1] + state.a[6];
		state.b[1] = T(state.b[0]);
		state.b[0] = fsmtmp;

		outfrom_fsm = (state.b[0] + state.a[1]) ^ state.b[1];
		state.a[2] = a_mul(state.a[2]) ^ state.a[4] ^ ainv_mul(state.a[13]) ^ outfrom_fsm;
		fsmtmp = state.b[1] + state.a[7];
		state.b[1] = T(state.b[0]);
		state.b[0] = fsmtmp;

		outfrom_fsm = (state.b[0] + state.a[2]) ^ state.b[1];
		state.a[3] = a_mul(state.a[3]) ^ state.a[5] ^ ainv_mul(state.a[14]) ^ outfrom_fsm;
		fsmtmp = state.b[1] + state.a[8];
		state.b[1] = T(state.b[0]);
		state.b[0] = fsmtmp;

		outfrom_fsm = (state.b[0] + state.a[3]) ^ state.b[1];
		state.a[4] = a_mul(state.a[4]) ^ state.a[6] ^ ainv_mul(state.a[15]) ^ outfrom_fsm;
		fsmtmp = state.b[1] + state.a[9];
		state.b[1] = T(state.b[0]);
		state.b[0] = fsmtmp;

		outfrom_fsm = (state.b[0] + state.a[4]) ^ state.b[1];
		state.a[5] = a_mul(state.a[5]) ^ state.a[7] ^ ainv_mul(state.a[0]) ^ outfrom_fsm;
		fsmtmp = state.b[1] + state.a[10];
		state.b[1] = T(state.b[0]);
		state.b[0] = fsmtmp;

		outfrom_fsm = (state.b[0] + state.a[5]) ^ state.b[1];
		state.a[6] = a_mul(state.a[6]) ^ state.a[8] ^ ainv_mul(state.a[1]) ^ outfrom_fsm;
		fsmtmp = state.b[1] + state.a[11];
		state.b[1] = T(state.b[0]);
		state.b[0] = fsmtmp;

		outfrom_fsm = (state.b[0] + state.a[6]) ^ state.b[1];
		state.a[7] = a_mul(state.a[7]) ^ state.a[9] ^ ainv_mul(state.a[2]) ^ outfrom_fsm;
		fsmtmp = state.b[1] + state.a[12];
		state.b[1] = T(state.b[0]);
		state.b[0] = fsmtmp;

		outfrom_fsm = (state.b[0] + state.a[7]) ^ state.b[1];
		state.a[8] = a_mul(state.a[8]) ^ state.a[10] ^ ainv_mul(state.a[3]) ^ outfrom_fsm;
		fsmtmp = state.b[1] + state.a[13];
		state.b[1] = T(state.b[0]);
		state.b[0] = fsmtmp;

		outfrom_fsm = (state.b[0] + state.a[8]) ^ state.b[1];
		state.a[9] = a_mul(state.a[9]) ^ state.a[11] ^ ainv_mul(state.a[4]) ^ outfrom_fsm;
		fsmtmp = state.b[1] + state.a[14];
		state.b[1] = T(state.b[0]);
		state.b[0] = fsmtmp;

		outfrom_fsm = (state.b[0] + state.a[9]) ^ state.b[1];
		state.a[10] = a_mul(state.a[10]) ^ state.a[12] ^ ainv_mul(state.a[5]) ^ outfrom_fsm;
		fsmtmp = state.b[1] + state.a[15];
		state.b[1] = T(state.b[0]);
		state.b[0] = fsmtmp;

		outfrom_fsm = (state.b[0] + state.a[10]) ^ state.b[1];
		state.a[11] = a_mul(state.a[11]) ^ state.a[13] ^ ainv_mul(state.a[6]) ^ outfrom_fsm;
		fsmtmp = state.b[1] + state.a[0];
		state.b[1] = T(state.b[0]);
		state.b[0] = fsmtmp;

		outfrom_fsm = (state.b[0] + state.a[11]) ^ state.b[1];
		state.a[12] = a_mul(state.a[12]) ^ state.a[14] ^ ainv_mul(state.a[7]) ^ outfrom_fsm;
		fsmtmp = state.b[1] + state.a[1];
		state.b[1] = T(state.b[0]);
		state.b[0] = fsmtmp;

		outfrom_fsm = (state.b[0] + state.a[12]) ^ state.b[1];
		state.a[13] = a_mul(state.a[13]) ^ state.a[15] ^ ainv_mul(state.a[8]) ^ outfrom_fsm;
		fsmtmp = state.b[1] + state.a[2];
		state.b[1] = T(state.b[0]);
		state.b[0] = fsmtmp;

		outfrom_fsm = (state.b[0] + state.a[13]) ^ state.b[1];
		state.a[14] = a_mul(state.a[14]) ^ state.a[0] ^ ainv_mul(state.a[9]) ^ outfrom_fsm;
		fsmtmp = state.b[1] + state.a[3];
		state.b[1] = T(state.b[0]);
		state.b[0] = fsmtmp;

		outfrom_fsm = (state.b[0] + state.a[14]) ^ state.b[1];
		state.a[15] = a_mul(state.a[15]) ^ state.a[1] ^ ainv_mul(state.a[10]) ^ outfrom_fsm;
		fsmtmp = state.b[1] + state.a[4];
		state.b[1] = T(state.b[0]);
		state.b[0] = fsmtmp;
	}
	return 0;
}
int next_state_stream(STRUMOK_DATA &state, UINT * &out_stream)
{
	UINT fsmtmp;

	state.a[0] = a_mul(state.a[0]) ^ state.a[2] ^ ainv_mul(state.a[11]);
	fsmtmp = state.b[1] + state.a[5];
	state.b[1] = T(state.b[0]);
	state.b[0] = fsmtmp;
	out_stream[0] = (state.b[0] + state.a[0]) ^ state.b[1] ^ state.a[1];

	state.a[1] = a_mul(state.a[1]) ^ state.a[3] ^ ainv_mul(state.a[12]);
	fsmtmp = state.b[1] + state.a[6];
	state.b[1] = T(state.b[0]);
	state.b[0] = fsmtmp;
	out_stream[1] = (state.b[0] + state.a[1]) ^ state.b[1] ^ state.a[2];

	state.a[2] = a_mul(state.a[2]) ^ state.a[4] ^ ainv_mul(state.a[13]);
	fsmtmp = state.b[1] + state.a[7];
	state.b[1] = T(state.b[0]);
	state.b[0] = fsmtmp;
	out_stream[2] = (state.b[0] + state.a[2]) ^ state.b[1] ^ state.a[3];

	state.a[3] = a_mul(state.a[3]) ^ state.a[5] ^ ainv_mul(state.a[14]);
	fsmtmp = state.b[1] + state.a[8];
	state.b[1] = T(state.b[0]);
	state.b[0] = fsmtmp;
	out_stream[3] = (state.b[0] + state.a[3]) ^ state.b[1] ^ state.a[4];

	state.a[4] = a_mul(state.a[4]) ^ state.a[6] ^ ainv_mul(state.a[15]);
	fsmtmp = state.b[1] + state.a[9];
	state.b[1] = T(state.b[0]);
	state.b[0] = fsmtmp;
	out_stream[4] = (state.b[0] + state.a[4]) ^ state.b[1] ^ state.a[5];

	state.a[5] = a_mul(state.a[5]) ^ state.a[7] ^ ainv_mul(state.a[0]);
	fsmtmp = state.b[1] + state.a[10];
	state.b[1] = T(state.b[0]);
	state.b[0] = fsmtmp;
	out_stream[5] = (state.b[0] + state.a[5]) ^ state.b[1] ^ state.a[6];

	state.a[6] = a_mul(state.a[6]) ^ state.a[8] ^ ainv_mul(state.a[1]);
	fsmtmp = state.b[1] + state.a[11];
	state.b[1] = T(state.b[0]);
	state.b[0] = fsmtmp;
	out_stream[6] = (state.b[0] + state.a[6]) ^ state.b[1] ^ state.a[7];

	state.a[7] = a_mul(state.a[7]) ^ state.a[9] ^ ainv_mul(state.a[2]);
	fsmtmp = state.b[1] + state.a[12];
	state.b[1] = T(state.b[0]);
	state.b[0] = fsmtmp;
	out_stream[7] = (state.b[0] + state.a[7]) ^ state.b[1] ^ state.a[8];

	state.a[8] = a_mul(state.a[8]) ^ state.a[10] ^ ainv_mul(state.a[3]);
	fsmtmp = state.b[1] + state.a[13];
	state.b[1] = T(state.b[0]);
	state.b[0] = fsmtmp;
	out_stream[8] = (state.b[0] + state.a[8]) ^ state.b[1] ^ state.a[9];

	state.a[9] = a_mul(state.a[9]) ^ state.a[11] ^ ainv_mul(state.a[4]);
	fsmtmp = state.b[1] + state.a[14];
	state.b[1] = T(state.b[0]);
	state.b[0] = fsmtmp;
	out_stream[9] = (state.b[0] + state.a[9]) ^ state.b[1] ^ state.a[10];

	state.a[10] = a_mul(state.a[10]) ^ state.a[12] ^ ainv_mul(state.a[5]);
	fsmtmp = state.b[1] + state.a[15];
	state.b[1] = T(state.b[0]);
	state.b[0] = fsmtmp;
	out_stream[10] = (state.b[0] + state.a[10]) ^ state.b[1] ^ state.a[11];

	state.a[11] = a_mul(state.a[11]) ^ state.a[13] ^ ainv_mul(state.a[6]);
	fsmtmp = state.b[1] + state.a[0];
	state.b[1] = T(state.b[0]);
	state.b[0] = fsmtmp;
	out_stream[11] = (state.b[0] + state.a[11]) ^ state.b[1] ^ state.a[12];

	state.a[12] = a_mul(state.a[12]) ^ state.a[14] ^ ainv_mul(state.a[7]);
	fsmtmp = state.b[1] + state.a[1];
	state.b[1] = T(state.b[0]);
	state.b[0] = fsmtmp;
	out_stream[12] = (state.b[0] + state.a[12]) ^ state.b[1] ^ state.a[13];

	state.a[13] = a_mul(state.a[13]) ^ state.a[15] ^ ainv_mul(state.a[8]);
	fsmtmp = state.b[1] + state.a[2];
	state.b[1] = T(state.b[0]);
	state.b[0] = fsmtmp;
	out_stream[13] = (state.b[0] + state.a[13]) ^ state.b[1] ^ state.a[14];

	state.a[14] = a_mul(state.a[14]) ^ state.a[0] ^ ainv_mul(state.a[9]);
	fsmtmp = state.b[1] + state.a[3];
	state.b[1] = T(state.b[0]);
	state.b[0] = fsmtmp;
	out_stream[14] = (state.b[0] + state.a[14]) ^ state.b[1] ^ state.a[15];

	state.a[15] = a_mul(state.a[15]) ^ state.a[1] ^ ainv_mul(state.a[10]);
	fsmtmp = state.b[1] + state.a[4];
	state.b[1] = T(state.b[0]);
	state.b[0] = fsmtmp;
	out_stream[15] = (state.b[0] + state.a[15]) ^ state.b[1] ^ state.a[0];
	return 0;
}
UINT T(UINT b_0)
{
	unsigned char B_0[8],
		Exit_B_0[8];

	for (int i = 0; i < 8; i++)
		B_0[i] = b_0 >> i * 8;

	B_0[0] = table_0[B_0[0]];
	B_0[1] = table_1[B_0[1]];
	B_0[2] = table_2[B_0[2]];
	B_0[3] = table_3[B_0[3]];
	B_0[4] = table_0[B_0[4]];
	B_0[5] = table_1[B_0[5]];
	B_0[6] = table_2[B_0[6]];
	B_0[7] = table_3[B_0[7]];

	static char mdr_code[64] = { 0x01 , 0x01 , 0x05 , 0x01 , 0x08 , 0x06 , 0x07 , 0x04,
		0x04 , 0x01 , 0x01 , 0x05 , 0x01 , 0x08 , 0x06 , 0x07,
		0x07 , 0x04 , 0x01 , 0x01 , 0x05 , 0x01 , 0x08 , 0x06,
		0x06 , 0x07 , 0x04 , 0x01 , 0x01 , 0x05 , 0x01 , 0x08,
		0x08 , 0x06 , 0x07 , 0x04 , 0x01 , 0x01 , 0x05 , 0x01,
		0x01 , 0x08 , 0x06 , 0x07 , 0x04 , 0x01 , 0x01 , 0x05,
		0x05 , 0x01 , 0x08 , 0x06 , 0x07 , 0x04 , 0x01 , 0x01,
		0x01 , 0x05 , 0x01 , 0x08 , 0x06 , 0x07 , 0x04 , 0x01 };

	for (int i = 0; i < 8; i++)
	{
		int dividend = 0;
		for (int j = 0; j < 8; j++)
			dividend ^= mulpol_16(B_0[j], mdr_code[8 * i + j]);
		Exit_B_0[i] = divpol_X8_X4_X3_X_1(dividend);
	}

	UINT returner = 0;

	for (int i = 0; i < 8; i++)
		returner = (returner << 8) ^ Exit_B_0[7 - i];

	return returner;
}

UINT alpha(UINT a)
{
	return 0;
}
UINT a_mul_inv(UINT a)
{
	return 0;
}


int mulpol_16(char pol_1, char pol_2)
{
	int derivative_pol = 0;
	for (int i = 0; i < 8; i++)
		if ((pol_1 >> i) & 0x01)
			derivative_pol ^= (((int)(pol_2)& 0xFF) << i);
	return derivative_pol;
}
int divpol_X8_X4_X3_X_1(int pol_1)
{
	int derivative_pol = pol_1;
	for (int i = 0; i < 8; i++)
		if (derivative_pol >> (15 - i) & 0x01)
			derivative_pol ^= (0x011D << (7 - i));
	return derivative_pol;
}

